<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用YOLOv11训练自己的数据集和推理的经历</title>
    <link href="/2025/02/14/%E4%BD%BF%E7%94%A8YOLOv11%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8C%E6%8E%A8%E7%90%86%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <url>/2025/02/14/%E4%BD%BF%E7%94%A8YOLOv11%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E5%92%8C%E6%8E%A8%E7%90%86%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>寒假要使用YOLOv11训练自己的数据集和推理，完成后刚好来简单回忆和总结一下<br>步骤如下：<br>1.在官网下载Yolov11的代码<br>2.在官网下载Anaconda<br>3.准备好一个文件夹作为数据集<br>4.接着上网下载大量推理所需的相关图片放入数据集中<br>5.使用 labelimg 标注工具标注数据集图片，可以在python环境，使用 pip install labelimg进行安装<br>6.安装完成在Anaconda终端输入命令启动标注软件<br>7.设置自动保存标注生成的标注文件<br>8.标注格式选择yolo格式<br>9.标注所有图片<br>10.将数据集划分为训练集和验证集<br>11.完成了数据集的准备<br>12.修改yolo的训练配置文件，在项目下创建data.vaml文件名，文件名根据数据集名称取<br>13.复制如下代码：<br>train: E:\Desktop\new-yolov9\yolotest\images\train  # train images (relative to ‘path’) 4 images<br>val: E:\Desktop\new-yolov9\yolotest\images\val  # val images (relative to ‘path’) 4 images</p><p>nc: 2</p><h1 id="class-names"><a href="#class-names" class="headerlink" title="class names"></a>class names</h1><p>names: [‘dog’,’cat’]<br>14.在官网安装pytorch环境<br>15.在项目中新建一个requirements.txt,然后把下面代码复制进去：</p><h1 id="Ultralytics-requirements"><a href="#Ultralytics-requirements" class="headerlink" title="Ultralytics requirements"></a>Ultralytics requirements</h1><h1 id="Example-pip-install-r-requirements-txt"><a href="#Example-pip-install-r-requirements-txt" class="headerlink" title="Example: pip install -r requirements.txt"></a>Example: pip install -r requirements.txt</h1><h1 id="Base-—————————————"><a href="#Base-—————————————" class="headerlink" title="Base —————————————-"></a>Base —————————————-</h1><p>matplotlib&gt;&#x3D;3.3.0<br>numpy&#x3D;&#x3D;1.24.4 # pinned by Snyk to avoid a vulnerability<br>opencv-python&gt;&#x3D;4.6.0<br>pillow&gt;&#x3D;7.1.2<br>pyyaml&gt;&#x3D;5.3.1<br>requests&gt;&#x3D;2.23.0<br>scipy&gt;&#x3D;1.4.1<br>tqdm&gt;&#x3D;4.64.0</p><h1 id="Logging-————————————"><a href="#Logging-————————————" class="headerlink" title="Logging ————————————-"></a>Logging ————————————-</h1><h1 id="tensorboard-2-13-0"><a href="#tensorboard-2-13-0" class="headerlink" title="tensorboard&gt;&#x3D;2.13.0"></a>tensorboard&gt;&#x3D;2.13.0</h1><h1 id="dvclive-2-12-0"><a href="#dvclive-2-12-0" class="headerlink" title="dvclive&gt;&#x3D;2.12.0"></a>dvclive&gt;&#x3D;2.12.0</h1><h1 id="clearml"><a href="#clearml" class="headerlink" title="clearml"></a>clearml</h1><h1 id="comet"><a href="#comet" class="headerlink" title="comet"></a>comet</h1><h1 id="Plotting-————————————"><a href="#Plotting-————————————" class="headerlink" title="Plotting ————————————"></a>Plotting ————————————</h1><p>pandas&gt;&#x3D;1.1.4<br>seaborn&gt;&#x3D;0.11.0</p><h1 id="Export-————————————–"><a href="#Export-————————————–" class="headerlink" title="Export ————————————–"></a>Export ————————————–</h1><h1 id="coremltools-7-0-CoreML-export"><a href="#coremltools-7-0-CoreML-export" class="headerlink" title="coremltools&gt;&#x3D;7.0  # CoreML export"></a>coremltools&gt;&#x3D;7.0  # CoreML export</h1><h1 id="onnx-1-12-0-ONNX-export"><a href="#onnx-1-12-0-ONNX-export" class="headerlink" title="onnx&gt;&#x3D;1.12.0  # ONNX export"></a>onnx&gt;&#x3D;1.12.0  # ONNX export</h1><h1 id="onnxsim-0-4-1-ONNX-simplifier"><a href="#onnxsim-0-4-1-ONNX-simplifier" class="headerlink" title="onnxsim&gt;&#x3D;0.4.1  # ONNX simplifier"></a>onnxsim&gt;&#x3D;0.4.1  # ONNX simplifier</h1><h1 id="nvidia-pyindex-TensorRT-export"><a href="#nvidia-pyindex-TensorRT-export" class="headerlink" title="nvidia-pyindex  # TensorRT export"></a>nvidia-pyindex  # TensorRT export</h1><h1 id="nvidia-tensorrt-TensorRT-export"><a href="#nvidia-tensorrt-TensorRT-export" class="headerlink" title="nvidia-tensorrt  # TensorRT export"></a>nvidia-tensorrt  # TensorRT export</h1><h1 id="scikit-learn-0-19-2-CoreML-quantization"><a href="#scikit-learn-0-19-2-CoreML-quantization" class="headerlink" title="scikit-learn&#x3D;&#x3D;0.19.2  # CoreML quantization"></a>scikit-learn&#x3D;&#x3D;0.19.2  # CoreML quantization</h1><h1 id="tensorflow-2-4-1-TF-exports-cpu-aarch64-macos"><a href="#tensorflow-2-4-1-TF-exports-cpu-aarch64-macos" class="headerlink" title="tensorflow&gt;&#x3D;2.4.1  # TF exports (-cpu, -aarch64, -macos)"></a>tensorflow&gt;&#x3D;2.4.1  # TF exports (-cpu, -aarch64, -macos)</h1><h1 id="tflite-support"><a href="#tflite-support" class="headerlink" title="tflite-support"></a>tflite-support</h1><h1 id="tensorflowjs-3-9-0-TF-js-export"><a href="#tensorflowjs-3-9-0-TF-js-export" class="headerlink" title="tensorflowjs&gt;&#x3D;3.9.0  # TF.js export"></a>tensorflowjs&gt;&#x3D;3.9.0  # TF.js export</h1><h1 id="openvino-dev-2023-0-OpenVINO-export"><a href="#openvino-dev-2023-0-OpenVINO-export" class="headerlink" title="openvino-dev&gt;&#x3D;2023.0  # OpenVINO export"></a>openvino-dev&gt;&#x3D;2023.0  # OpenVINO export</h1><h1 id="Extras-————————————–"><a href="#Extras-————————————–" class="headerlink" title="Extras ————————————–"></a>Extras ————————————–</h1><p>psutil  # system utilization<br>py-cpuinfo  # display CPU info<br>thop&gt;&#x3D;0.1.1  # FLOPs computation</p><h1 id="ipython-interactive-notebook"><a href="#ipython-interactive-notebook" class="headerlink" title="ipython  # interactive notebook"></a>ipython  # interactive notebook</h1><h1 id="albumentations-1-0-3-training-augmentations"><a href="#albumentations-1-0-3-training-augmentations" class="headerlink" title="albumentations&gt;&#x3D;1.0.3  # training augmentations"></a>albumentations&gt;&#x3D;1.0.3  # training augmentations</h1><h1 id="pycocotools-2-0-6-COCO-mAP"><a href="#pycocotools-2-0-6-COCO-mAP" class="headerlink" title="pycocotools&gt;&#x3D;2.0.6  # COCO mAP"></a>pycocotools&gt;&#x3D;2.0.6  # COCO mAP</h1><h1 id="roboflow"><a href="#roboflow" class="headerlink" title="roboflow"></a>roboflow</h1><p>16.在根目录新建一个python文件取名为：train.py<br>17.把训练代码复制到train.py文件：</p><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import warnings<br>warnings.filterwarnings(‘ignore’)<br>from ultralytics import YOLO</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    # model.load(‘yolo11n.pt’) # 加载预训练权重,改进或者做对比实验时候不建议打开，因为用预训练模型整体精度没有很明显的提升<br>    model &#x3D; YOLO(model&#x3D;r’D:\2-Python\1-YOLO\YOLOv11\ultralytics-8.3.2\ultralytics\cfg\models\11\yolo11.yaml’)<br>    model.train(data&#x3D;r’data.yaml’,<br>                imgsz&#x3D;640,<br>                epochs&#x3D;50,<br>                batch&#x3D;4,<br>                workers&#x3D;0,<br>                device&#x3D;’’,<br>                optimizer&#x3D;’SGD’,<br>                close_mosaic&#x3D;10,<br>                resume&#x3D;False,<br>                project&#x3D;’runs&#x2F;train’,<br>                name&#x3D;’exp’,<br>                single_cls&#x3D;False,<br>                cache&#x3D;False,<br>                )</p><p>18.模型配置路径改成你自己的路径，还有数据集配置文件也修改成你自己的路径<br>19.运行代码，开始推理<br>大家试试吧：）</p>]]></content>
    
    
    <categories>
      
      <category>经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali利用MS08-067漏洞入侵并控制WindowsXp主机</title>
    <link href="/2025/02/14/Kali%E5%88%A9%E7%94%A8MS08-067%E6%BC%8F%E6%B4%9E%E5%85%A5%E4%BE%B5%E5%B9%B6%E6%8E%A7%E5%88%B6WindowsXp%E4%B8%BB%E6%9C%BA/"/>
    <url>/2025/02/14/Kali%E5%88%A9%E7%94%A8MS08-067%E6%BC%8F%E6%B4%9E%E5%85%A5%E4%BE%B5%E5%B9%B6%E6%8E%A7%E5%88%B6WindowsXp%E4%B8%BB%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>第一次成功用kali获得目标主机的shell所以记录一下（尽管目标主机是一台本地虚拟机，哈哈）<br>方法步骤如下：<br>1.下载VM虚拟机<br>2.在镜像网站下载windowsxp 2003 server的镜像<br>3.在VM上新建一个虚拟机安装下载的windowsxp 2003 server的镜像<br>4.首先，确保目标主机的共享服务已开启，且系统已重启<br>5.然后，使用kali的MSF进行漏洞扫描，确认目标主机的135和445端口开放<br>6.接着，利用MS08-067漏洞自动进行攻击<br>7.获得目标主机的shell<br>8.可以成功在目标主机创建指定文件，说明入侵成功<br>9.后面，我们可以通过所获得目标主机的shell创建了新用户并设置密码，以进一步增强对目标主机的控制<br>10.最后，利用kali远程登录新创建的用户账户，成功控制目标主机<br>最后希望大家也可以尝试一下！</p>]]></content>
    
    
    <categories>
      
      <category>网络空间安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在本地部署Deepseek</title>
    <link href="/2025/02/14/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2Deepseek/"/>
    <url>/2025/02/14/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2Deepseek/</url>
    
    <content type="html"><![CDATA[<p>在本地部署Deepseek的步骤:<br>1.在官网下载LM Stdio<br>2.换国内镜像源hf-mirror<br>3.使用Power user<br>4.搜索Deepseek模型</p><p>【模型选择】<br>没有GPU：1.5B Q8推理 或者 8B Q4推理<br>4G GPU：8B Q4推理<br>8G GPU：32B Q4推理 或者 8B Q4推理<br>16G GPU：32B Q4推理 或者 32B Q8推理<br>24G GPU: 32B Q8推理 或者 70B Q2推理</p><p>Qwen底模除了1.5B其他不建议；Llama底模推荐。</p><p>5.下载选择的Deepseek模型<br>6.开启一段对话(Chat)<br>7.设置并载入下载好的模型<br>8.使用模型</p><p>可供测试的数学题<br>    1117117是否是素数？（是）<br>    2024^2025和2025^2024哪个大？（前者）<br>    sin(x) + xcos(x)在(-pi, pi)中有几个零点？（三个）<br>    请手动计算并给出前5个梅森素数<br>    定义W(t)是标准布朗运动，求f(x)使得W(t)^2 + f(t)是一个鞅。(f(t) &#x3D; -t)<br>祝大家玩的开心!</p>]]></content>
    
    
    <categories>
      
      <category>Deepseek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客的过程</title>
    <link href="/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>1.注册一个GitHub账号.<br>2.在电脑上安装好Git.<br>3.在电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具.<br>4.在GitHub上创建一个新的代码仓库用于保存网页。<br>点击Your repositories，进入仓库页面。<br>点击New按钮，进入仓库创建页面<br>填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。<br>5.安装 Hexo<br>npm install -g hexo-cli<br>创建一个项目 hexo-blog 并初始化<br>hexo init hexo-blog<br>cd hexo-blog<br>npm install<br>6.使用Fluid更换主题<br>安装主题<br>下载 最新 release 版本 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。<br>指定主题<br>修改 Hexo 博客目录中的 _config.yml：<br>theme: fluid<br>language: zh-CN<br>7.创建「关于页」<br>hexo new page about<br>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。</p><hr><h2 id="title-about-date-2025-02-10-13-03-47-layout-about"><a href="#title-about-date-2025-02-10-13-03-47-layout-about" class="headerlink" title="  title: about  date: 2025-02-10 13:03:47  layout: about"></a>  title: about<br>  date: 2025-02-10 13:03:47<br>  layout: about</h2><p>这里写关于页的正文，支持 Markdown, HTML<br>8.创建文章<br>修改 Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。<br>post_asset_folder: true<br>执行如下命令创建一篇新文章<br>hexo new post XXXX<br>执行完成后在source_posts目录下生成了一个md文件和一个同名的资源目录(用于存放图片)<br>在测试文章.md中添加如下模板:</p><hr><h2 id="title-XXXX-date-XXXX-tags-XXXX-categories-XXXX"><a href="#title-XXXX-date-XXXX-tags-XXXX-categories-XXXX" class="headerlink" title="  title: XXXX  date: XXXX  tags:  - XXXX  categories:  - XXXX"></a>  title: XXXX<br>  date: XXXX<br>  tags:<br>  - XXXX<br>  categories:<br>  - XXXX</h2><p>9.个性化页面展示</p><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><p>  a.浏览器tab页名称<br>  修改根目录下 _config.yml 中的 title 字段。<br>  b.博客标题<br>  主题目录 themes\fluid 下 _config.yml 中的 blog_title 字段。<br>  c.主页正中间的文字<br>  主题目录 themes\fluid 下 _config.yml 中的 text 字段。<br>10.添加阅读量统计</p><p>Fluid 主题写好了统计阅读量的代码，但是缺少相应配置所以没有开启，需要借助三方服务来统计阅读量，这里是有 Leancloud 的免费服务来进行统计。</p><p>  a.申请LeanCloud账号并创建应用<br>  进入 官网 注册账号<br>  需实名认证，完成后才能使用各项服务<br>  验证邮箱<br>  创建应用，选择开发版即可，免费的<br>  进入该应用的 设置-&gt;应用凭证，找到 AppID 和 AppKey，记录下来后面配置要用<br>  b.修改Fluid配置<br>  打开主题目录 themes\fluid下的 _config.yml 文件，修改如下配置</p><p><img src="/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/a.png" alt="搭建博客的过程"></p><p>  c.单篇文章阅读量计数<br>  打开统计开关<br>  配置 leancloud的 app_id 和 app_key<br>  打开计数功能，统计来源改为 leancloud</p><p><img src="/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/b.png" alt="搭建博客的过程"></p><p>  d.页面底部展示网站的 PV、UV 统计数</p><p><img src="/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/c.png" alt="搭建博客的过程"></p><p>11.添加评论功能</p><p>评论功能的代码已经写好了，只不过没有开启，需要修改一些配置<br>打开主题目录 themes\fluid下的 _config.yml 文件，修改配置<br>启用评论插件</p><p><img src="/2025/02/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/d.png" alt="搭建博客的过程"></p><p>配置 LeanCloud 的 appId 和 appkey<br>12.发布到GitHub Pages<br>安装hexo-deployer-git<br>npm install hexo-deployer-git –save<br>修改根目录下的 _config.yml，配置 GitHub 相关信息</p><p>  deploy:<br>    type: git<br>    repo: <a href="https://github.com/cpython333/cpython333.github.io.git">https://github.com/cpython333/cpython333.github.io.git</a><br>    branch: main<br>    token: XXX</p><p>部署到GitHub<br>浏览器访问 <a href="https://cpython333.github.io/">https://cpython333.github.io/</a><br>部署成功</p>]]></content>
    
    
    <categories>
      
      <category>经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/01/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/01/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/2025/01/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" alt="测试一下"></p><p>Hi!</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/26/hello-world/"/>
    <url>/2025/01/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
